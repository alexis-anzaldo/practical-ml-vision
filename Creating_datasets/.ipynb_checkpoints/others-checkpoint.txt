## Dummy PCA

import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.datasets import make_blobs

# # Generate synthetic data with three classes
# X, y = make_blobs(n_samples=300, centers=3, random_state=42)

# Apply PCA to the data
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)

# Plot the results
plt.figure(figsize=(8, 6))
for i in range(len(np.unique(y))):
    plt.scatter(X_pca[y == i, 0], X_pca[y == i, 1], label=f'Class {i}')

plt.title('PCA of Synthetic Data')
plt.xlabel('PCA1')
plt.ylabel('PCA2')
plt.legend()
plt.show()


## PCA Error
import numpy as np
from sklearn.decomposition import PCA
from sklearn.metrics import mean_squared_error

# Generate synthetic data with three classes
X, y = make_blobs(n_samples=300, centers=1, random_state=42)
X_train = X
# Generate synthetic data with three classes
X, y = make_blobs(n_samples=300, centers=1, random_state=42)
X_production = X


# Assuming X_train is your training data and X_production is your production batch data
# Apply PCA to the training data
pca = PCA(n_components=2)
X_train_pca = pca.fit_transform(X_train)

# Project the production batch data onto the same PCA space
X_production_pca = pca.transform(X_production)

# Inverse transform to get the reconstructed data
X_production_reconstructed = pca.inverse_transform(X_production_pca)

# Calculate the reconstruction error
reconstruction_error = mean_squared_error(X_production, X_production_reconstructed)

print(f"Reconstruction Error: {reconstruction_error}")